const countPaths = (grid, r = 0, c = 0, memo = {}) => {
  const pos = r + ',' + c;
  if (pos in memo) return memo[pos];

  const inBounds = r >= 0 && r < grid.length && c >= 0 && c < grid[0].length;
  const finalPos = r === grid.length - 1 && c === grid[0].length - 1;

  if (!inBounds || grid[r][c] === 'X') return 0;
  if (finalPos) return 1;

  memo[pos] =
    countPaths(grid, r + 1, c, memo) + countPaths(grid, r, c + 1, memo);
  return memo[pos];
};

const testCases = [
  {
    grid: [
      ['O', 'O'],
      ['O', 'O'],
    ],
    expected: 2,
  },
  {
    grid: [
      ['O', 'O', 'X'],
      ['O', 'O', 'O'],
      ['O', 'O', 'O'],
    ],
    expected: 5,
  },
  {
    grid: [
      ['O', 'O', 'O'],
      ['O', 'O', 'X'],
      ['O', 'O', 'O'],
    ],
    expected: 3,
  },
  {
    grid: [
      ['O', 'O', 'O'],
      ['X', 'X', 'O'],
      ['O', 'O', 'O'],
    ],
    expected: 1,
  },
  {
    grid: [
      ['O', 'O', 'X', 'O', 'O', 'O'],
      ['O', 'O', 'X', 'O', 'O', 'O'],
      ['X', 'O', 'X', 'O', 'O', 'O'],
      ['X', 'X', 'X', 'O', 'O', 'O'],
      ['O', 'O', 'O', 'O', 'O', 'O'],
    ],
    expected: 0,
  },
  {
    grid: [
      ['O', 'O'],
      ['O', 'X'],
    ],
    expected: 0,
  },
  {
    grid: [
      [
        'O',
        'O',
        'X',
        'X',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'X',
        'X',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'X',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'X',
        'X',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'X',
        'X',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'X',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
    ],
    expected: 3190434,
  },
  {
    grid: [
      ['O', 'O', 'X', 'O', 'O', 'O'],
      ['O', 'O', 'O', 'O', 'O', 'X'],
      ['X', 'O', 'O', 'O', 'O', 'O'],
      ['X', 'X', 'X', 'O', 'O', 'O'],
      ['O', 'O', 'O', 'O', 'O', 'O'],
    ],
    expected: 42,
  },
  {
    grid: [
      ['O', 'O', 'X', 'O', 'O', 'O'],
      ['O', 'O', 'O', 'O', 'O', 'X'],
      ['X', 'O', 'O', 'O', 'O', 'O'],
      ['X', 'X', 'X', 'O', 'O', 'O'],
      ['O', 'O', 'O', 'O', 'O', 'X'],
    ],
    expected: 0,
  },
  {
    grid: [
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
      [
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
      ],
    ],
    expected: 40116600,
  },
  {
    grid: [['O']],
    expected: 1,
  },
];

testCases.forEach(({ grid, expected }, index) => {
  const result = countPaths(grid);
  console.log(
    `Test Case ${index + 1}:`,
    result === expected
      ? 'Passed'
      : `Failed (Expected ${expected}, got ${result})`
  );
});
